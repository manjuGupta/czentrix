####### Global Parameters #########

listen=udp:172.16.18.43:5060
####### Global Parameters #########
####### Global Parameters #########
log_level=3
log_stderror=no
log_facility=LOG_LOCAL5
mhomed = yes 
children=4

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no

listen=udp:eth0:5060
listen=udp:eth1:5060
listen=udp:0.0.0.0:5060


####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

loadmodule "db_mysql.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "dialog.so"
loadmodule "mi_datagram.so"
loadmodule "uri.so"
loadmodule "acc.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "alias_db.so"
loadmodule "avpops.so"
loadmodule "load_balancer.so"
loadmodule "domain.so"
loadmodule "perl.so"
loadmodule "nathelper.so"
loadmodule "siptrace.so"
# ----------------- setting module-specific parameters --------------
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
# ----- mi_fifo params -----
#modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
#modparam("mi_fifo", "fifo_mode", 0666)
modparam("mi_datagram", "socket_name", "/tmp/opensips.sock")
modparam("mi_datagram", "unix_socket_mode", 0666)
# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
# do not append from tag to the RR (no need for this script)
modparam("dialog", "db_mode", 1)
modparam("dialog", "db_url", "mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
#modparam("siptrace", uri", "mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")

#modparam("siptrace", "trace_on", 1)
#modparam("siptrace", "trace_id","[tid]uri=mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager;table=sip_trace;")
#modparam("siptrace", "table", "sip_trace")

modparam("rr","enable_double_rr",1)
modparam("rr", "append_fromtag", 0)
# ----- registrar params -----
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 1)
#modparam("registrar", "default_expires", 600)
modparam("registrar", "max_expires", 300)
# ----- usrloc params -----
modparam("usrloc", "db_mode", 0)
/* uncomment the following lines if you want to enable DB persistency
for location entries */
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
# ----- uri params -----
/* by default we disable the DB support in the module as we do not need it in this configuration */
modparam("uri", "use_uri_table", 0)
# ----- acc params -----
/* what sepcial events should be accounted ? */
modparam("acc", "early_media", 1)
modparam("acc", "report_cancels", 1)
/* by default ww do not adjust the direct of the sequential requests.
if you enable this parameter, be sure the enable "append_fromtag" in "rr" module */
modparam("acc", "detect_direction", 0)

#### UDP protocol
loadmodule "proto_udp.so"

# ----- auth_db params -----
/* uncomment the following lines if you want to
enable the DB based authentication */
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
modparam("auth_db", "load_credentials", "")
# ----- alias_db params -----
/* uncomment the following lines if you want to
enable the DB based aliases */
modparam("alias_db", "db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
# ----- domain params -----
/* uncomment the following lines to
enable multi-domain detection support */
modparam("domain", "db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
modparam("domain", "db_mode", 1) # Use caching

#---------------------avpops-------------------------------------
modparam("avpops","db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")

modparam("avpops","avp_table","ALB_load_balancer")

#-------------load_balancer params--------------------------------
modparam("load_balancer", "db_url","mysql://czroot:sqladmin@MYDB/czentrix_campaign_manager")
modparam("load_balancer", "db_table", "ALB_load_balancer")
modparam("load_balancer", "db_interface_table", "cluster_network_details")
modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_reply_codes", "404")
#------------------nathelper params------------------------------
modparam("usrloc","nat_bflag",6)
modparam("nathelper","sipping_bflag",8)
modparam("nathelper", "ping_nated_only", 1)   # Ping only clients behind NAT
modparam("nathelper", "received_avp", "$avp(received_nh)")

#----------------------statistics---------------------------------
modparam("perl", "modpath", "/usr/local/lib64/opensips/perl/")
modparam("perl", "filename", "/usr/local/etc/opensips/manualrouting.pl")
####### Routing Logic ########
route{
	force_rport();
	$avp(priority) = 0;
	$avp(g_id) = 0;
	$avp(barger_group_id) = 0;
	$avp(source_ip) = $si;
	$avp(did) = 0 ;
	$avp(c_id) = 0;
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}
	xlog("L_INFO","CZENTRIX PACKET RECEIVED time [$Tf] method ($rm) r-uri ($rU $rd) 2nd via ($hdr(via[1]))src_user=$fU src_domain=$fd dst_user=$rU dst_domain=$rd src_ip=$si\n");
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(1);
				setflag(3);
			} 
			else if (is_method("INVITE")) {
			}
			route(1);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
	record_route();
	#initial requests
	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}
	t_check_trans();
	if ((!is_method("REGISTER")) && (is_from_local())) {
		if (!proxy_authorize("", "ALB_subscriber")) {
			proxy_challenge("", "0");
		exit;
		}
		if (!db_check_from()) {
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
		consume_credentials();
		# caller authenticated
	}
	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}
	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		#record_route();
	# account only INVITEs
	if (is_method("OPTIONS")) {
		exit;
	}
        if(is_method("INVITE")) {
                                xlog("L_INFO","CZENTRIX INVITE PACKET RECEIVED time [$Tf] method ($rm) r-uri ($rU $rd) 2nd via ($hdr(via[1]))src_user=$fU src_domain=$fd dst_user=$rU dst_domain=$rd src_ip=$si\n");
			$avp(autologin) = $hdr(SIPCONTEXT);  
                	if($avp(autologin) =~ "AUTOAGENTLOGIN"){
                        	xlog("L_INFO"," Autologin Block ru: $ru rd: $rd ");
                        	if(!lookup("ALB_location")) {
                                	xlog("L_INFO","Error in lookup database of users");
                        	}
                	} else {
			if($rU =~ "2#") {
                                strip(2);
				append_hf("Tvt-Callinfo: INCOMING_CALL\r\n","User-Agent");
				route(11);
				exit;
                        #Check for agent login
			} else if($ru =~ "1#") {
				#$avp(cz_info) = $hdr(Cz_Info);
				$var(x) = $hdr(Cz_Info);
				if($var(x)) {
                                	$rd = $(var(x){s.select,0,#});
					if($rd) {
                                		xlog("L_INFO"," value of rd = $rd \n");
                                		strip(2);
						append_hf("Tvt-Callinfo: OUTGOING_CALL\r\n","User-Agent");
						#route(9);
						route(1);
                				exit();
					} else {
						xlog("L_ERR","No Destination Found For Outbound Call\n");
						send_reply("486","No Destination Found");
						exit();
					}
				} else {
					xlog("L_ERR","No Destination Found For Outbound Call \n");
					send_reply("486","No Destination Found");
					exit();
				}
			} else if($rU =~ "^6") {
                                strip(1);
                                setflag(5);
                                setflag(1);
                                setflag(7);
				append_hf("Tvt-Callinfo: AGENT_LOGIN\r\n","User-Agent");
                                #check for already login agents
                                #avp_db_query("select ip_addr from agent_live where agent_id='$rU'","$avp(t_ip)");
				$avp(ret) = avp_db_query("select ip_addr  from agent_live where (agent_ext='$fU') OR ( agent_id='$rU') ","$avp(t_ip)");
				if($avp(ret) == "1") {
                                if($avp(t_ip)){
                                        xlog("L_INFO","Either Agent $rU or Extension $fU is already logged in on server $avp(t_ip)\n");
					send_reply("486","Extension already in use");
                                        #route(8);
                			exit;
					}
				}else if($avp(ret) == "-2") {
				#Select Load Balancing Type from ALB_agent_lookup table of a user
					$avp(ret1) = avp_db_query("select lookup_type,group_id from ALB_agent_lookup where agent_id='$rU'","$avp(s:ld);$avp(g_id)");
					if($avp(ret1) == "1"){
						if($avp(s:ld) == "MANUAL") {
							route(5);       
						} else {
					#Select group id for automatic load balancing
							route(6);
						}
					} else {
						xlog("L_ERR","Rule not Assigned to Agent : '$rU'\n");
						send_reply("486","Rule not Assigned");
						exit;
					}
				}else {
					xlog("L_ERR"," Query cant be executed for Agent-login Request \n");
					send_reply("486","Contact Admin");
					exit;
				}
                        #Check for barge agent
                        } else if(($rU =~ "^801")||($rU =~ "^802")||($rU =~ "^803")) {
                        	xlog("L_INFO","Bargin call");
				append_hf("Tvt-Callinfo: BARGING\r\n","User-Agent");
				$avp(barger_camp_check) = avp_db_query("select campaign_id,location_id from agent where agent_id='$fU' && QA_ckh='TRUE' ","$avp(barger_camp_id);$avp(barger_location_id)");
				if($avp(barger_camp_check) == 1) {
					$avp(agent_camp_check) = avp_db_query("select campaign_id from agent where agent_id=substr('$rU',4,6)","$avp(agent_camp_id)");
					if($avp(barger_camp_id) != $avp(agent_camp_id)) {
						xlog("L_ERR","Unauthorized Barge(Barger: '$fU' Barger Campaign_id: $avp(barger_camp_id) Requested Agent: '$rU' Agent Campaign_id: $avp(agent_camp_id))\n");
						send_reply("486","Unauthorized Barge");
						exit;
					}
					$avp(a_live) = avp_db_query("select node_id,location_id from agent_live where agent_id=substr('$rU',4,6)","$avp(node_id);$avp(node_location_id)");
					if($avp(a_live) == 1) {
						if($avp(barger_location_id) != $avp(node_location_id)) {
							perl_exec("manual_barge");
							if(!$avp(t_ip)) {
								xlog("L_INFO","No Resource Available to barge $rU\n");
								send_reply("486","No Resource available to Barge");
								exit();
							}
							append_hf("TVT-CZINFO: SIP/$rU@$avp(t_ip)\r\n","User-Agent");
							xlog("L_INFO","Inside Barge load balancing block\n");
							$avp(barger_id) = avp_db_query("select  barger_groupid from ALB_agent_lookup  where agent_id=substr('$rU',4,6)","$avp(barger_group_id)");
							if($avp(barger_id) == 1) {
								$avp(t_ret) = load_balance("$avp(barger_group_id)","barger");
								xlog("L_INFO"," Barger groupId: $avp(barger_group_id)");
								if($avp(t_ret) < 0){
									xlog("L_ERR","No Destination Found For Barger '$fU' and Agent: '$rU' \n");
									send_reply("486","No Destination Found to Barge");
									exit();
								}
								t_on_failure("1");
								t_on_reply("1");
								route(1);
							} else {
								xlog("L_INFO","No Rule Assigned to Barger '$fU' and Agent: '$rU'\n");
								send_reply("486","No Rule Assigned to barger");
								exit();
							}
						} else {
							xlog("L_INFO","===========Same Location===Barging call");
							append_hf("Tvt-Callinfo: BARGING\r\n","User-Agent");
							$avp(barger_camp_check) = avp_db_query("select campaign_id from agent where agent_id='$fU' && QA_ckh='TRUE'","$avp(barger_camp_id)");
							$avp(agent_camp_check) = avp_db_query("select campaign_id from agent where agent_id=substr('$rU',4,6)","$avp(agent_camp_id)");
							if ($avp(barger_camp_check) != "1"  || $avp(agent_camp_check) != "1") {
								xlog("L_ERR","Invalid Barge(Barger: '$fU' Barger Campaign_id: $avp(barger_camp_id) Requested Agent: '$rU' Agent Campaign_id: $avp(agent_camp_id))\n");
								send_reply("486","Invalid Barge");
								exit;
							}
							if($avp(barger_camp_id) != $avp(agent_camp_id)) {
								xlog("L_ERR","Unauthorized Barge(Barger: '$fU' Barger Campaign_id: $avp(barger_camp_id) Requested Agent: '$rU' Agent Campaign_id: $avp(agent_camp_id))\n");
								send_reply("486","Unauthorized Barge");
								exit;
							}
#strip(3);
							$avp(a_live) = avp_db_query("select node_id from agent_live where agent_id=substr('$rU',4,6)","$avp(node_id)");
							if($avp(a_live) == 1) {
								perl_exec("manual_barge");
								xlog("L_INFO","Either Agent $rU logged in on server $avp(t_ip)\n");
								$rd = $avp(t_ip);
								route(1);  
							} else {
								xlog("L_ERR","No Destination Found for Barger '$fU' and Agent: '$rU'\n");
								send_reply("486","Contact Admin");
								exit;
							}  	
						}
					} else {
						xlog("L_ERR","No Destination Found for Barger '$fU' and Agent: '$rU'\n");
						send_reply("486","Contact Admin");
						exit;
					}     
				}  else if( $avp(barger_camp_check) == -1 ){
					$avp(barger_camp_check) = avp_db_query("select campaign_id from agent where agent_id='$fU' && QA_ckh='TRUE'","$avp(barger_camp_id)");
					$avp(agent_camp_check) = avp_db_query("select campaign_id from agent where agent_id=substr('$rU',4,6)","$avp(agent_camp_id)");
					if ($avp(barger_camp_check) != "1"  || $avp(agent_camp_check) != "1") {
						xlog("L_ERR","Invalid Barge(Barger: '$fU' Barger Campaign_id: $avp(barger_camp_id) Requested Agent: '$rU' Agent Campaign_id: $avp(agent_camp_id))\n");
						send_reply("486","Invalid Barge");
						exit;
					}
					if($avp(barger_camp_id) != $avp(agent_camp_id)) {
						xlog("L_ERR","Unauthorized Barge(Barger: '$fU' Barger Campaign_id: $avp(barger_camp_id) Requested Agent: '$rU' Agent Campaign_id: $avp(agent_camp_id))\n");
						send_reply("486","Unauthorized Barge");
						exit;
					}
#strip(3);
					$avp(a_live) = avp_db_query("select node_id from agent_live where agent_id=substr('$rU',4,6)","$avp(node_id)");
					if($avp(a_live) == 1) {
						perl_exec("manual_barge");
						xlog("L_INFO","Either Agent $rU logged in on server $avp(t_ip)\n");
						$rd = $avp(t_ip);
						route(1);
					} else {
						xlog("L_ERR","No Destination Found for Barger '$fU' and Agent: '$rU' \n");
						send_reply("486","Contact Admin");
						exit;
					}	
				} else {
					xlog("L_ERR","Empty Result for Barger '$fU' and Agent: '$rU'\n");
					send_reply("486","Contact Admin");
					exit;
				}

                       #Check for outbound call
                       } else if($rU =~ "^0") {
			       xlog("L_INFO","Outbound =========================  Other call");
			       $avp(exten) = avp_db_query("select 1 from ALB_subscriber where username='$fU'&&user_type='extension'","$avp(res)");
			       if($avp(exten) == 1) {
				       avp_db_query("select group_id from ALB_peer_lookup where peer_id='$fU'","$avp(g_id)");
				       strip(1);
				       route(7);
			       } else {
				       send_reply("404", "Extension not Found");
				       exit;
			       }

                      #Agent look up for reverse login,ext to ext calling
                      }	else if($rU =~ "^3#" || $rU =~ "^3%23"){
                               if($rU =~ "^3#")
                                       strip(2);
                               else
                                       strip(4);
 
                               $avp(did) = $rU ;
                               $avp(c_id) = $fU;
 
                               xlog("L_INFO","Bargin call");
                               append_hf("Tvt-Callinfo: BARGING\r\n","User-Agent");
                               route(13);
                               if($avp(cloud)) {
                                       $avp(res) = avp_db_query("select node_id from agent_live where agent_id=$avp(cloud)","$avp(node_id)");
                                       if($avp(res) == 1){
                                               perl_exec("manual_barge");
                                               xlog("L_INFO","Barging Agent '$avp(cloud)'\n");
                                               $rU = '802'+$avp(cloud) ;
                                               $rd = $avp(t_ip);
                                               route(1);
                                       } else if($avp(res) == -2 ){
                                               xlog("L_ERR","Agent '$avp(cloud)' not logged in ....\n");
                                               send_reply("404","Agent not logged in");
                                               exit;
                                       } else {
                                               xlog("L_ERR"," Query cant be executed for Barging Request \n");
                                               send_reply("486","Contact Admin");
                                               exit;
                                       }
                                } else {
                                        xlog("L_ERR","No Destination Found for Barge\n");
                                        send_reply("486","Contact Admin");
                                        exit;
                                }
                      }else if(!lookup("ALB_location")) {
                                        #avp_db_query("select lookup_type,group_id from ALB_agent_lookup where agent_id='$rU'","$avp(s:ld);$avp(g_id)");
                                              #route(6);
                      		xlog("L_INFO","Error in lookup database of users");
                      }
		}
        }

	if (!is_uri_host_local())
	{
		if(is_from_local()) {
			route(1);
		} else {
			#sl_send_reply("403","Not here");
		}
	}
	##if( is_method("PUBLISH|SUBSCRIBE"))
	## route(2);
	if (is_method("PUBLISH"))
	{
		sl_send_reply("405", "Nethod Not Allowed");
		exit;
	}
	if (is_method("SUBSCRIBE"))
	{
		sl_send_reply("405", "Nethod Not Allowed");
		exit;
	}
	if (is_method("REGISTER"))
	{
		xlog("L_INFO","Register message recieved\n");
		if (!www_authorize("", "ALB_subscriber"))
		{
			xlog("L_INFO","In autharize message block\n");
			www_challenge("", "0");
			exit;
		}
		if (!db_check_to())
		{
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
		if (!save("ALB_location")) {
			sl_send_reply("603", "Denied");
		} else {
			#avp_db_query("update ALB_subscriber set ip_add='$si' where username='$fU'");
		}
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# apply DB based aliases (uncomment to enable)
	alias_db_lookup("dbaliases");

	if (!lookup("ALB_location","m")) {
		switch ($retcode) {
		case -1:
		case -3:
			t_newtran();
			t_reply("404", "Not Found");
			exit;
		case -2:
			sl_send_reply("405", "Method Not Allowed");
			exit;
		}
	}
	# when routing via usrloc, log the missed calls also setflag(2);
	route(1);
}
#Packet forwarding Block
route[1] {
        # send it out now; use stateful forwarding as it works reliably
        xlog("L_INFO","Came here route 1\n");
        if (!t_relay()) {
                sl_reply_error();
        };
        exit;
}
#Failure Block for Automatic load balancing
failure_route[1] {
        if (t_was_cancelled()) {
                exit;
        }
        if (t_check_status("481|408|503")) {
                xlog("L_INFO", "load_balancer: Request from $fu to $tu failed. Re-balancing!\n");
                #lb_disable();
		load_balance("$avp(g_id)", "agents");
		if ($retcode < 0) {
			xlog("L_INFO", "load_balancer: Insufficient resource to balance request from $fu to $tu \n");
			send_reply("486","no resources available");
			exit;
		}	
                t_on_failure("1");
				t_on_reply("1");
                route(1);
        }

}
#Main Block for Manual load balancing
route[5] {
	#$avp(priority) = $avp(priority) +1;
	#avp_db_query("select node_id from ALB_manual_load_balancer where group_id='$avp(g_id)'&&priority='$avp(priority)'&&status='ACTIVE'","$avp(p_ip)");
	perl_exec("manual_routing");
	
	xlog("L_INFO","return value from perl module $avp(r_ip)\n");
	if(!$avp(r_ip)) { 
		xlog("L_INFO","No any primary server found for user=$rU\n");
		send_reply("486","No primary server found ");
                exit();
	} else {
		$rd=$avp(r_ip);
		t_on_failure("2");
		t_on_reply("1");
		route(1);
	}
	#exit;	
}
#Main Block for Automatic load balancing
route[6] {
	xlog("L_INFO","Insert in load balancing automatic section group id $avp(g_id)\n");
	$avp(a_ret) = load_balance("$avp(g_id)","agents");
	if($avp(a_ret) == -2){
		xlog("L_ERR","No Destination Found\n");	
		send_reply("486","No Destination Found");
		exit();
	}
        t_on_failure("1");
		t_on_reply("1");
        route(1);

}
#Main Block for OutBound Calling(Automatic)
route[7] {
	xlog("L_INFO","Insert in Outbound call using load balancing");
	$avp(priority) = $avp(priority) +1;
	#load_balance("1","exten");
	avp_db_query("select node_ip from ALB_manual_load_balancer where group_id='$avp(g_id)'&&preferred_flag=1&&priority='$avp(priority)'","$avp(p_ip)");
	xlog("L_INFO","Found ip is $avp(p_ip)\n");
	$rd=$avp(p_ip);
	if(!$rd)
		xlog("L_INFO","No any primary ip found for user=$rU\n");
	t_on_failure("3");
	t_on_reply("1");
	route(1);
}
#Failure Block for OutBound Calling(Automatic)
failure_route[3] {
	$avp(priority) = $avp(priority) +1;
        if (t_was_cancelled()) {
                exit;
        }
        if (t_check_status("481|408|503")) {
                xlog("L_INFO", "load_balancer: Request from $fu to $tu failed. Re-balancing!\n");
		avp_db_query("select node_ip from ALB_manual_load_balancer where group_id='$avp(g_id)'&&preferred_flag='0'&&priority='$avp(priority)'","$avp(p_ip)");
		xlog("L_INFO","Found ip is $avp(p_ip)\n");
                $rd=$avp(p_ip);
		if(!$rd)
	                xlog("L_INFO","No any secondary ip found for user=$rU\n");
                t_on_failure("3");
				t_on_reply("1");
                route(1);
        }

}
#Failure Block for Manual load balancing
failure_route[2] {
        $avp(priority) = $avp(priority) +1;
        if (t_was_cancelled()) {
                exit;
        }
        if (t_check_status("481|408|503")) {
                xlog("L_INFO", "load_balancer: Request from $fu to $tu failed. Re-balancing!\n");
                #avp_db_query("select node_ip from ALB_manual_load_balancer where group_id='$avp(g_id)'&&preferred_flag='0'&&priority='$avp(priority)'","$avp(p_ip)");
		#xlog("Found ip is $avp(p_ip)\n");
		$var(r_ip) = perl_exec("manual_routing"); 
                $rd=$var(r_ip);
		if(!$rd)
			xlog("L_INFO","No any secondary ip found for user=$rU\n");
                t_on_failure("2");
				t_on_reply("1");
		route(1);
        }
}
#If agents/peer already login
route[8] {
	$rd=$avp(t_ip);
	route(1);
}

onreply_route[1] {
	if ( subst('/^Contact: <sip:([0-9]+)@(.*)$/Contact: <sip:$fU@$si:5060>\r/ig' )) {
                xlog("L_INFO","contact modified!");
        }
}
route[9] {
	perl_exec("parse_cz_info");
	xlog("L_INFO","Return value from parse_cz_info is $avp(g_ip)======================\n");
	$rd = $avp(g_ip);
	route(1);
}

route[11] {
	xlog("L_INFO","Inside transfer testing block\n");
	$avp(t_ret) = load_balance("0","ivrs");
	if($avp(t_ret) == -2){
		xlog("L_ERR","No Destination Found For Incoming Call\n");
		send_reply("486","No Destination Found");
		exit();
	}
	t_on_failure("4");
                t_on_reply("1");
	route(1);
}

failure_route[4] {
	if (t_was_cancelled()) {
                exit;
        }
        if (t_check_status("481|408|503")) {
                xlog("L_INFO", "load_balancer: Request from $fu to $tu failed. Re-balancing!\n");
                load_balance("0", "ivrs");

                if ($retcode < 0) {
                    xlog("L_INFO", "load_balancer: Insufficient resource to balance request from $fu to $tu \n");
                    send_reply("486","no resources available");
                    exit;
                }
                t_on_failure("1");
                                t_on_reply("1");
                route(1);
        }

}
route[13] {
        perl_exec("barge_check");
}
